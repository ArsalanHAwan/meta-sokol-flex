## For additional configuration examples, see also
## oe-core/meta/conf/local.conf.sample and
## oe-core/meta/conf/local.conf.sample.extended.

# Distro is set to Sokol Flex OS distro.
DISTRO = 'sokol-flex'

# The specific target machine for this build. Automatically set by setup-environment.
MACHINE ??= "qemux86"

# The path to the toolchains installed with CodeBench. Default value: ${FLEXDIR}/toolchains,
# where FLEXDIR is the path to your Sokol Flex OS workspace.
#TOOLCHAINS_PATH ?= "${FLEXDIR}/toolchains"

# Uncomment to use the oe/yocto-built toolchain rather than the external
#TCMODE:sokol-flex = "default"

# The CORE_IMAGE_EXTRA_INSTALL variable allows extra individual packages to be
# added to any of the images inheriting core-image.bbclass, including the
# "core" images (e.g. core-image-base, core-image-minimal) as well as
# development-image and production-image..
#CORE_IMAGE_EXTRA_INSTALL += "bash"

# The EXTRA_IMAGE_FEATURES variable allows groups of packages to be added to
# all generated images. Some of these options are added to certain image types
# automatically. The variable can contain the following options:
#
#  "graphics"        - add a graphical environment, defaulting to wayland/weston
#                      or x11 depending on vendor support.
#  "dbg-pkgs"        - add -dbg packages for all installed packages
#                      (adds symbol information for debugging/profiling)
#  "dev-pkgs"        - add -dev packages for all installed packages
#                      (useful if you want to develop against libs in the image)
#  "tools-sdk"       - add development tools (gcc, make, pkgconfig etc.)
#  "tools-debug"     - add debugging tools (gdb, strace)
#  "tools-profile"   - add profiling tools (oprofile, exmap, lttng valgrind (x86 only))
#  "tools-benchmark" - add benchmarking tools (bonnie++, lmbench, etc)
#  "tools-testapps"  - add useful testing tools (ts_print, aplay, arecord etc.)
#  "codebench-debug" - core debug tools for use with codebench. this is
#                      a subset of tools-debug (gdbserver, strace, sftp server)
#  "debug-tweaks"    - make an image suitable for development
#                      e.g. ssh root access has a blank password
#  "splash"          - include a splashscreen (default: psplash, but the
#                      particular package can be set with the SPLASH variable)
#  "multimedia"      - add gstreamer support for running multimedia files
#  "multilib-runtime" - basic runtime multilib libraries to enable execution
#                       of third party executables and CodeBench development
#                       on non-default archs (libgcc, libc, libstdc++, lttng)
#
# There are other options that can be used here, see
# meta/classes/image.bbclass and meta/classes/core-image.bbclass for more
# details.

EXTRA_IMAGE_FEATURES ?= "multilib-runtime"

# Image features for development-image
IMAGE_FEATURES_DEVELOPMENT ?= "debug-tweaks"
IMAGE_FEATURES_DEVELOPMENT:append:feature-flex-bsp = " codebench-debug ssh-server-openssh tools-profile"

# Image features for production-image
IMAGE_FEATURES_PRODUCTION ?= ""
IMAGE_FEATURES_DISABLED_PRODUCTION ?= "${IMAGE_FEATURES_DEVELOPMENT} ssh-server-dropbear"

# Uncomment to enable runtime testing with ptest
#USER_FEATURES += "ptest"
#EXTRA_IMAGE_FEATURES += "ptest-pkgs"

# Uncomment and alter to set the root password. Set to '0' to explicitly allow
# the empty root password even in production-image. Set to '*' to explicitly
# disable root login.
#ROOT_PASSWORD = "0"
IMAGE_CLASSES:append = " image-root-password"

# User features lets you more easily manipulate the distro features. To add a
# distro feature, simply add it to USER_FEATURES. To remove, prefix it with ~.
#
# Disable x11
#USER_FEATURES += "~x11"

# How many tasks bitbake should run in parallel. Default: NUM_CPUS
#BB_NUMBER_THREADS ?= "${@int(oe.utils.cpu_count())}"

# How many jobs 'make' should run in parallel when compiling. Default: NUM_CPUS
#PARALLEL_MAKE ?= "-j ${@oe.utils.cpu_count()}"

# Uncomment to scale down threads and jobs when memory-per-cpu-core is low
#BB_NUMBER_THREADS = "${BB_NUMBER_THREADS_SCALED}"
#PARALLEL_MAKE = "${PARALLEL_MAKE_SCALED}"

# Uncomment to exclude GPLv3 software from the build
#INCOMPATIBLE_LICENSE = "GPL-3.0* LGPL-3.0*"

# Uncomment this to enable inclusion of gdbserver in the codebench-debug
# packagegroup / image feature even when GPL-3.0 is in INCOMPATIBLE_LICENSE, or
# using a distro which sets it that way (atp).
#ALLOW_GPLV3_GDBSERVER = "1"

# The gplv2 binutils does not support aarch64, so the gplv3 version is built and
# installed with tools-profile on that architecture by default, even in a
# non-gplv3 build. To disable this, you may comment this out, comment out line
# which installs binutils, or remove tools-profile from EXTRA_IMAGE_FEATURES.
INCOMPATIBLE_LICENSE_EXCEPTIONS:append:aarch64 = " ${BINUTILS_EXCEPTION}"
BINUTILS_EXCEPTION = "${@'binutils:GPL-3.0-only' if d.getVar('PN') == 'binutils' or (bb.data.inherits_class('image', d) and bb.utils.filter('IMAGE_FEATURES', 'tools-profile', d) == 'tools-profile') else ''}"

# Our download directory / cache for the workspace
DL_DIR ?= "${FLEXDIR}/downloads"

# BitBake has the capability to accelerate builds based on previously built
# output. This is done using "shared state" files which can be thought of as
# cache objects and this variable determines where those files are placed.
SSTATE_DIR ?= "${FLEXDIR}/cached-binaries"

# Continue to pull cached binaries and downloads from the Sokol Flex OS install
SSTATE_MIRROR_SITES += "\
    file://${FLEXDIR}/${MACHINE}/cached-binaries \
"
PREMIRRORS:prepend = "\
    .*://.*/.* file://${FLEXDIR}/${MACHINE}/downloads/ \n \
"

# Download files from a mirror
# Uncomment this INHERIT, and define SOURCE_MIRROR_URL
#
#INHERIT += "own-mirrors"
#SOURCE_MIRROR_URL = "file:///cache/downloads"
#SOURCE_MIRROR_URL = "http://myserver/sources"

# Shared-state files from other locations
#
# The SSTATE_MIRROR_SITES variable can be used to configure the system to
# search other mirror locations for these objects before it builds the data
# itself.
#
# This can be a filesystem directory, or a remote url such as http or ftp.
# These would contain the sstate-cache results from previous builds (possibly
# from other machines). This variable works like fetcher MIRRORS/PREMIRRORS
# and points to the cache locations to check for the shared objects.
#
#SSTATE_MIRROR_SITES += "http://mymirror/sstate"
#SSTATE_MIRROR_SITES += "\
#    http://someserver.tld/share/sstate \
#    file:///some/local/dir \
#"

# SDK target architecture
#
# Set to one of the mingw32 SDKMACHINEs to target Windows rather than Linux.
# Warning: if you choose to add packages to TOOLCHAIN_HOST_TASK and target
# Windows, then you must add the meta-mingw layer to your configuration.
#
# Valid values: i686, x86_64, i686-mingw32, x86_64-mingw32
#SDKMACHINE ?= "x86_64"

# By default, only include the target sysroot in the SDK, not host tools.
# Comment this line to change that. This packagegroup includes host tools like
# autoconf, automake, etc.
TOOLCHAIN_HOST_REMOVE ??= "nativesdk-packagegroup-sdk-host"
TOOLCHAIN_HOST_TASK:remove = "${TOOLCHAIN_HOST_REMOVE}"

# TOOLCHAIN_HOST_TASK is used to add host packages to the SDK, for
# example, to add bash:
#TOOLCHAIN_HOST_TASK_EXTRA += "nativesdk-bash"

# TOOLCHAIN_TARGET_TASK is used to add target packages to the SDK, for
# example, to add libncurses:
#TOOLCHAIN_TARGET_TASK_EXTRA += "ncurses-libncurses"

# The following is a list of additional classes to use when building which
# enable extra features. Some available options which can be included in this variable
# are:
#   - 'buildstats' to collect build statistics (e.g. task times)
USER_CLASSES ?= "buildstats"

# Archive the source and put them to ${DEPLOY_DIR}/sources/.
#
#INHERIT += "archiver"
#
# The tarball for the patched source will be created by default, and you
# can configure the archiver as follow:
#
# Create archive for:
# 1) original (or unpacked) source:
#ARCHIVER_MODE[src] = "original"
# 2) patched source: (default)
#ARCHIVER_MODE[src] = "patched"
# 3) configured source:
#ARCHIVER_MODE[src] = "configured"
#
# 4) the patches between do_unpack and do_patch:
#ARCHIVER_MODE[diff] = "1"
# set the files that you'd like to exclude from the diff:
#ARCHIVER_MODE[diff-exclude] ?= ".pc autom4te.cache patches"
#
# 5) the environment data, similar to 'bitbake -e recipe':
#ARCHIVER_MODE[dumpdata] = "1"
#
# 6) the recipe (.bb and .inc):
#ARCHIVER_MODE[recipe] = "1"
#
# 7) Whether output the .src.rpm package:
#ARCHIVER_MODE[srpm] = "1"
#
# 8) Filter the license, the recipe whose license in
#    COPYLEFT_LICENSE_INCLUDE will be included, and in
#    COPYLEFT_LICENSE_EXCLUDE will be excluded.
#COPYLEFT_LICENSE_INCLUDE = 'GPL* LGPL*'
#COPYLEFT_LICENSE_EXCLUDE = 'CLOSED Proprietary'
#
# 9) Config the recipe type that will be archived, the type can be
#    target, native, nativesdk, cross, crosssdk and cross-canadian,
#    you can set one or more types. Archive all types by default.
#COPYLEFT_RECIPE_TYPES = 'target'

# CONF_VERSION is increased each time build/conf/ changes incompatibly and is used to
# track the version of this file when it was generated. This can safely be ignored if
# this doesn't mean anything to you.
CONF_VERSION = "2"
