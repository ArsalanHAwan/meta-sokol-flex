## For additional configuration examples, see also
## oe-core/meta/conf/local.conf.sample and
## oe-core/meta/conf/local.conf.sample.extended

# Distro is set to Sokol Flex OS
DISTRO = 'sokol-flex'

# The target machine for this build. Automatically set by setup-environment.
MACHINE ??= "qemux86"

# The path to the toolchains installed with CodeBench. Default value: ${FLEXDIR}/toolchains,
# where FLEXDIR is the path to your Sokol Flex OS workspace.
#TOOLCHAINS_PATH ?= "${FLEXDIR}/toolchains"

# Use the oe/yocto-built toolchain rather than the external
#TCMODE:sokol-flex = "default"

# Add additional packages to images
#CORE_IMAGE_EXTRA_INSTALL += "bash"

# The EXTRA_IMAGE_FEATURES variable allows groups of packages to be added to
# all generated images. For example:
#
#  "graphics"        - add a graphical environment, defaulting to wayland/weston
#                      or x11 depending on vendor support.
#  "dbg-pkgs"        - add -dbg packages for all installed packages
#                      (adds symbol information for debugging/profiling)
#  "dev-pkgs"        - add -dev packages for all installed packages
#                      (useful if you want to develop against libs in the image)
#  "tools-sdk"       - add development tools (gcc, make, pkgconfig etc.)
#  "tools-debug"     - add debugging tools (gdb, strace)
#  "tools-profile"   - add profiling tools (oprofile, exmap, lttng valgrind (x86 only))
#  "tools-benchmark" - add benchmarking tools (bonnie++, lmbench, etc)
#  "tools-testapps"  - add useful testing tools (ts_print, aplay, arecord etc.)
#  "codebench-debug" - core debug tools for use with codebench. this is
#                      a subset of tools-debug (gdbserver, strace, sftp server)
#  "debug-tweaks"    - make an image suitable for development
#                      e.g. ssh root access has a blank password
#  "splash"          - include a splashscreen (default: psplash, but the
#                      particular package can be set with the SPLASH variable)
#  "multimedia"      - add gstreamer support for running multimedia files
#  "multilib-runtime" - basic runtime multilib libraries to enable execution
#                       of third party executables and CodeBench development
#                       on non-default archs (libgcc, libc, libstdc++, lttng)
#
# There are other options that can be used here, see
# meta/classes/image.bbclass and meta/classes/core-image.bbclass for more
# details.
EXTRA_IMAGE_FEATURES ?= "multilib-runtime"

# Image features for development-image
IMAGE_FEATURES_DEVELOPMENT ?= "debug-tweaks"
IMAGE_FEATURES_DEVELOPMENT:append:feature-flex-bsp = " codebench-debug ssh-server-openssh tools-profile"

# Image features for production-image
IMAGE_FEATURES_PRODUCTION ?= ""
IMAGE_FEATURES_DISABLED_PRODUCTION ?= "${IMAGE_FEATURES_DEVELOPMENT} ssh-server-dropbear"

# Set the root password. Set to '0' to explicitly set and allow the empty root
# password even in production-image. Set to '*' to explicitly disable root
# login.
#ROOT_PASSWORD = "0"
IMAGE_CLASSES:append = " image-root-password"

# Enable and disable distro features. To disable a feature, prefix it with ~
#USER_FEATURES += "~x11"

# Enable runtime testing with ptest
#USER_FEATURES += "ptest"
#EXTRA_IMAGE_FEATURES += "ptest-pkgs"

# How many tasks bitbake should run in parallel. Default: NUM_CPUS
#BB_NUMBER_THREADS ?= "${@int(oe.utils.cpu_count())}"

# How many jobs 'make' should run in parallel when compiling. Default: NUM_CPUS
#PARALLEL_MAKE ?= "-j ${@oe.utils.cpu_count()}"

# Uncomment to scale down threads and jobs when memory-per-cpu-core is low
#BB_NUMBER_THREADS = "${BB_NUMBER_THREADS_SCALED}"
#PARALLEL_MAKE = "${PARALLEL_MAKE_SCALED}"

# Exclude GPLv3 software from the build
#INCOMPATIBLE_LICENSE = "GPL-3.0* LGPL-3.0*"

# Exceptions can be made. For example, for debugging and profiling
#INCOMPATIBLE_LICENSE_EXCEPTIONS += "binutils:GPL-3.0-only gdbserver-external:GPL-3.0"

# Download directory
DL_DIR ?= "${FLEXDIR}/downloads"

# Prebuilt binary cache
SSTATE_DIR ?= "${FLEXDIR}/cached-binaries"

# Download files from a mirror
#INHERIT += "own-mirrors"
#SOURCE_MIRROR_URL = "file:///cache/downloads"
#SOURCE_MIRROR_URL = "http://myserver/sources"

# Shared-state files from other locations
#SSTATE_MIRROR_SITES += "http://mymirror/sstate"
#SSTATE_MIRROR_SITES += "\
#    http://someserver.tld/share/sstate \
#    file:///some/local/dir \
#"

# Specify the architecture/os where a built SDK will be installed
# Set to one of the mingw32 SDKMACHINEs to target Windows rather than Linux
#
# Valid values: i686, x86_64, i686-mingw32, x86_64-mingw32
#SDKMACHINE ?= "x86_64"

# By default, include a toolchain the SDK, but not host tools like autoconf
TOOLCHAIN_HOST_REMOVE ??= "nativesdk-packagegroup-sdk-host"
TOOLCHAIN_HOST_TASK:remove = "${TOOLCHAIN_HOST_REMOVE}"

# Add host packages to the SDK
#TOOLCHAIN_HOST_TASK_EXTRA += "nativesdk-bash"

# Add target packages to the SDK
#TOOLCHAIN_TARGET_TASK_EXTRA += "ncurses-libncurses"

# Enable extra classes to enable optional features. For example, 'buildstats'
# to collect build statistics (e.g. task times)
USER_CLASSES ?= "buildstats"

# Enable source archival (to ${DEPLOY_DIR}/sources). See oe-core's
# local.conf.sample.extended for details on further configuration, including
# filtering based on license.
#
#INHERIT += "archiver"

CONF_VERSION = "2"
